import React, { useState, useEffect } from 'react';
import { useParams, Link } from 'react-router-dom';
import { Container, Row, Col, Card, Spinner, Alert, Button, ListGroup, Badge } from 'react-bootstrap';
import { getBatchDetails } from '../services/api';
import useSupplies from '../hooks/useSupplies';
import BottlingWizardModal from '../components/BottlingWizardModal';

// –ú–∞–ª–µ–Ω—å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–∞
const CompositionList = ({ composition }) => (
    <ListGroup variant="flush">
        {composition.map(c => (
            <ListGroup.Item key={c.sort_name} className="d-flex justify-content-between align-items-center">
                {c.sort_name}
                <Badge bg="info">{c.percentage.toFixed(2)}%</Badge>
            </ListGroup.Item>
        ))}
    </ListGroup>
);

// –ú–∞–ª–µ–Ω—å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–º–µ—Ä–æ–≤
const MeasurementList = ({ measurements }) => (
    <div className="mt-2">
        {measurements.map(m => (
            <small key={m.id} className="text-muted d-block">
                - {m.type}: <strong>{m.value} {m.unit}</strong> ({new Date(m.date).toLocaleDateString()})
            </small>
        ))}
    </div>
);

function BatchDetailPage() {
    const { batchId } = useParams(); // –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ URL
    const [details, setDetails] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    const [showBottlingWizard, setShowBottlingWizard] = useState(false);

    const { supplies } = useSupplies(); // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏ –¥–ª—è –ú–∞—Å—Ç–µ—Ä–∞ –†–æ–∑–ª–∏–≤–∞

    const fetchDetails = async () => {
        setLoading(true);
        try {
            const response = await getBatchDetails(batchId);
            setDetails(response.data);
        } catch (err) {
            setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–∞—Ä—Ç–∏–∏.');
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchDetails();
    }, [batchId]);

    if (loading) return <Container className="text-center mt-5"><Spinner animation="border" /></Container>;
    if (error) return <Container><Alert variant="danger">{error}</Alert></Container>;
    if (!details) return null;

    const { batch_info, composition, process_logs } = details;

    return (
        <Container>
            <Row>
                {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ */}
                <Col md={4}>
                    <Card className="mb-4">
                        <Card.Header>
                            <Card.Title className="mb-0">–ü–∞—Å–ø–æ—Ä—Ç –ø–∞—Ä—Ç–∏–∏ üõÇ</Card.Title>
                        </Card.Header>
                        <Card.Body>
                            <h3>{batch_info.name}</h3>
                            <p><strong>–°—Ç–∞—Ç—É—Å:</strong> {batch_info.status || '–í —Ä–∞–±–æ—Ç–µ'}</p>
                            <p><strong>–¢–µ–∫—É—â–∏–π –æ–±—ä–µ–º:</strong> {batch_info.current_volume} –ª</p>
                            <p><strong>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</strong> {new Date(batch_info.created_at).toLocaleDateString()}</p>
                        </Card.Body>
                    </Card>

                    <Card className="mb-4">
                        <Card.Header>–°–æ—Å—Ç–∞–≤</Card.Header>
                        <CompositionList composition={composition} />
                    </Card>

                    <Card>
                        <Card.Header>–î–µ–π—Å—Ç–≤–∏—è</Card.Header>
                        <Card.Body>
                            <Button variant="primary" className="w-100 mb-2" onClick={() => setShowBottlingWizard(true)}>
                                –†–∞–∑–ª–∏—Ç—å –ø–æ –±—É—Ç—ã–ª–∫–∞–º üçæ
                            </Button>
                            <Button variant="outline-secondary" className="w-100">–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å ‚ûï</Button>
                        </Card.Body>
                    </Card>
                </Col>

                {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ */}
                <Col md={8}>
                    <h3>–ò—Å—Ç–æ—Ä–∏—è –ø–∞—Ä—Ç–∏–∏  Timeline</h3>
                    {process_logs.map(log => (
                        <Card key={log.id} className="mb-3">
                            <Card.Header className="d-flex justify-content-between">
                                <strong>{log.process_name}</strong>
                                <span>{new Date(log.start_date).toLocaleDateString()}</span>
                            </Card.Header>
                            <Card.Body>
                                {log.notes && <Card.Text>{log.notes}</Card.Text>}
                                {log.measurements.length > 0 && <MeasurementList measurements={log.measurements} />}
                                <Button variant="link" size="sm" className="mt-2">–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ä</Button>
                            </Card.Body>
                        </Card>
                    ))}
                </Col>
            </Row>

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ú–∞—Å—Ç–µ—Ä–∞ –†–æ–∑–ª–∏–≤–∞ */}
            <BottlingWizardModal
                show={showBottlingWizard}
                onClose={() => setShowBottlingWizard(false)}
                batch={batch_info}
                supplies={supplies}
                onSuccess={fetchDetails} // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–æ–∑–ª–∏–≤–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            />
        </Container>
    );
}

export default BatchDetailPage;