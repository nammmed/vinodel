import React, { useState } from 'react';
import { Table, Card, Button, ButtonGroup, Alert, Modal, Spinner } from 'react-bootstrap';
import { deleteGrape, createBatchFromGrape } from '../services/api';
import FruitStockForm from '../components/FruitStockForm';
import NewBatchForm from "../components/NewBatchForm";
import useFruitStock from '../hooks/useFruitStock';
import { toast } from "react-toastify";

function FruitStockPage() {
    const { fruits, loading, error, handleAddFruit, handleUpdateFruit, fetchFruits } = useFruitStock();

    const [modalType, setModalType] = useState(''); // 'add' –∏–ª–∏ 'edit'
    const [showFormModal, setShowFormModal] = useState(false);
    const [showNewBatchModal, setShowNewBatchModal] = useState(false);
    const [showDeleteModal, setShowDeleteModal] = useState(false);

    const [currentFruit, setCurrentFruit] = useState(null);
    const [fruitToDelete, setFruitToDelete] = useState(null);

    // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω ---
    const handleShowFormModal = (type, fruit = null) => {
        setModalType(type);
        setCurrentFruit(fruit);
        setShowFormModal(true);
    };

    const handleCloseModals = () => {
        setShowFormModal(false);
        setShowNewBatchModal(false);
        setShowDeleteModal(false);
        setCurrentFruit(null);
        setFruitToDelete(null);
    };

    const handleShowDeleteModal = (fruit) => {
        setFruitToDelete(fruit);
        setShowDeleteModal(true);
    };

    const handleShowNewBatchModal = (fruit) => {
        setCurrentFruit(fruit);
        setShowNewBatchModal(true);
    }

    // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π ---
    const handleSubmitForm = async (fruitData) => {
        const success = modalType === 'add'
            ? await handleAddFruit(fruitData)
            : await handleUpdateFruit(currentFruit.id, fruitData);

        if (success) {
            handleCloseModals();
        }
    };

    const handleDelete = async () => {
        try {
            await deleteGrape(fruitToDelete.id);
            toast.success(`–ó–∞–ø–∏—Å—å –æ "${fruitToDelete.sort_name}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.`);
            fetchFruits(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
            handleCloseModals();
        } catch (err) {
            toast.error(err.response?.data?.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏');
        }
    };

    const handleNewBatchSubmit = async (formData) => {
        try {
            await createBatchFromGrape(currentFruit.id, formData);
            toast.success(`–ü–∞—Ä—Ç–∏—è "${formData.batch_name}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!`);
            fetchFruits(); // –û–±–Ω–æ–≤–ª—è–µ–º –∏ —Å–ø–∏—Å–æ–∫ –ø–ª–æ–¥–æ–≤, —Ç.–∫. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–º–µ–Ω—å—à–∏–ª–æ—Å—å
            handleCloseModals();
        } catch (error) {
            toast.error(error.response?.data?.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Ä—Ç–∏–∏');
        }
    };

    // --- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ ---
    const getFormModalTitle = () => {
        if (modalType === 'add') return '–ù–æ–≤—ã–π –ø–ª–æ–¥ –≤ –ø–æ–≥—Ä–µ–± üçá';
        if (currentFruit) {
            const term = currentFruit.category === '–í–∏–Ω–æ–≥—Ä–∞–¥' ? '–≤–∏–Ω–æ–≥—Ä–∞–¥–∞' : '–ø–ª–æ–¥–∞';
            return `–ö–∞—Ä—Ç–æ—á–∫–∞ ${term}: ${currentFruit.sort_name} ‚úèÔ∏è`;
        }
        return '';
    };

    if (loading) return <Spinner animation="border" />;

    return (
        <div>
            <div className="d-flex justify-content-between align-items-center mb-4">
                <h2>–ó–∞–ø–∞—Å—ã –ø–ª–æ–¥–æ–≤ –∏ —è–≥–æ–¥ üçá</h2>
                <Button variant="success" onClick={() => handleShowFormModal('add')}>
                    –î–æ–±–∞–≤–∏—Ç—å –ø–ª–æ–¥
                </Button>
            </div>

            {error && <Alert variant="danger">{error}</Alert>}

            <Card>
                <Card.Body>
                    <Table striped hover responsive>
                        <thead>
                        <tr>
                            <th>–ù–∞–∑–≤–∞–Ω–∏–µ (—Å–æ—Ä—Ç)</th>
                            <th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–∫–≥)</th>
                            <th>–î–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è</th>
                            <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                        </tr>
                        </thead>
                        <tbody>
                        {fruits.length > 0 ? (
                            fruits.map((fruit) => (
                                <tr key={fruit.id}>
                                    <td>{fruit.sort_name}</td>
                                    <td>{fruit.quantity}</td>
                                    <td>{new Date(fruit.date_purchased).toLocaleDateString()}</td>
                                    <td>
                                        <ButtonGroup>
                                            <Button size="sm" onClick={() => handleShowNewBatchModal(fruit)}>
                                                –°–æ–∑–¥–∞—Ç—å –ø–∞—Ä—Ç–∏—é
                                            </Button>
                                            <Button variant="outline-primary" size="sm" onClick={() => handleShowFormModal('edit', fruit)}>
                                                –ò–∑–º–µ–Ω–∏—Ç—å
                                            </Button>
                                            <Button variant="outline-danger" size="sm" onClick={() => handleShowDeleteModal(fruit)}>
                                                –£–¥–∞–ª–∏—Ç—å
                                            </Button>
                                        </ButtonGroup>
                                    </td>
                                </tr>
                            ))
                        ) : (
                            <tr><td colSpan="4" className="text-center">–í–∞—à –ø–æ–≥—Ä–µ–± –ø—É—Å—Ç.</td></tr>
                        )}
                        </tbody>
                    </Table>
                </Card.Body>
            </Card>

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
            <Modal show={showFormModal} onHide={handleCloseModals}>
                <Modal.Header closeButton>
                    <Modal.Title>{getFormModalTitle()}</Modal.Title>
                </Modal.Header>
                <Modal.Body>
                    <FruitStockForm
                        initialData={currentFruit}
                        onSubmit={handleSubmitForm}
                        onClose={handleCloseModals}
                    />
                </Modal.Body>
            </Modal>

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Ç–∏–∏ */}
            <Modal show={showNewBatchModal} onHide={handleCloseModals}>
                <NewBatchForm
                    ingredient={currentFruit}
                    onSubmit={handleNewBatchSubmit}
                    onClose={handleCloseModals}
                />
            </Modal>

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è */}
            <Modal show={showDeleteModal} onHide={handleCloseModals}>
                <Modal.Header closeButton>
                    <Modal.Title>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</Modal.Title>
                </Modal.Header>
                <Modal.Body>
                    {fruitToDelete && <p>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –æ: "{fruitToDelete.sort_name}"?</p>}
                </Modal.Body>
                <Modal.Footer>
                    <Button variant="secondary" onClick={handleCloseModals}>–û—Ç–º–µ–Ω–∞</Button>
                    <Button variant="danger" onClick={handleDelete}>–£–¥–∞–ª–∏—Ç—å</Button>
                </Modal.Footer>
            </Modal>
        </div>
    );
}

export default FruitStockPage;