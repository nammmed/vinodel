import React, { useState, useEffect } from 'react';
import { Modal, Button, Form, Row, Col, Alert, ProgressBar, Spinner } from 'react-bootstrap';
import { blendBatches } from '../services/api';

function BlendLabModal({ show, onClose, batches, onSuccess }) {
    const [components, setComponents] = useState([]);
    const [blendName, setBlendName] = useState('');
    const [blendNotes, setBlendNotes] = useState('');
    const [saveAsRecipe, setSaveAsRecipe] = useState(false);
    const [recipeName, setRecipeName] = useState('');

    const [globalError, setGlobalError] = useState(null);
    const [isLoading, setIsLoading] = useState(false);

    // –≠—Ç–æ—Ç useEffect —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏
    // –∫–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –Ω–æ–≤—ã–º –Ω–∞–±–æ—Ä–æ–º –ø–∞—Ä—Ç–∏–π.
    useEffect(() => {
        if (batches && batches.length > 0) {
            setComponents(
                batches.map((b) => ({
                    id: b.id,
                    name: b.name,
                    availableVolume: parseFloat(b.current_volume),
                    usedVolume: 0,
                    error: null,
                }))
            );
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –∫—É–ø–∞–∂–∞
            const initialName = `–ö—É–ø–∞–∂ –∏–∑ ${batches.map(b => b.name).join(', ')}`;
            setBlendName(initialName.substring(0, 100)); // –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–ª–∏–Ω—É
            setRecipeName(initialName.substring(0, 100));
        }
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
        setBlendNotes('');
        setSaveAsRecipe(false);
        setGlobalError(null);
        setIsLoading(false);
    }, [batches, show]);


    // --- –†–∞—Å—á–µ—Ç—ã –Ω–∞ –ª–µ—Ç—É (–ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ) ---
    const totalBlendVolume = components.reduce((sum, c) => sum + (parseFloat(c.usedVolume) || 0), 0);
    const isFormValid = !isLoading && blendName.trim() !== '' && totalBlendVolume > 0 && components.every(c => !c.error) && (!saveAsRecipe || recipeName.trim() !== '');

    // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π ---

    const handleVolumeChange = (index, newVolumeStr) => {
        const newVolume = parseFloat(newVolumeStr) || 0;
        const newComponents = [...components];
        const component = newComponents[index];

        component.usedVolume = newVolume;
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—ä–µ–º–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        if (newVolume > component.availableVolume) {
            component.error = `–ú–∞–∫—Å–∏–º—É–º: ${component.availableVolume}–ª`;
        } else {
            component.error = null;
        }

        setComponents(newComponents);
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (!isFormValid) return;

        setIsLoading(true);
        setGlobalError(null);

        const payload = {
            name: blendName,
            notes: blendNotes,
            components: components
                .filter(c => c.usedVolume > 0) // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
                .map(c => ({
                    component_id: c.id,
                    volume: c.usedVolume
                })),
            save_as_recipe: saveAsRecipe,
            recipe_name: saveAsRecipe ? recipeName : undefined
        };

        try {
            const response = await blendBatches(payload);
            onSuccess(response.data); // –°–æ–æ–±—â–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É –æ–± —É—Å–ø–µ—Ö–µ
            onClose(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        } catch (err) {
            setGlobalError(err.response?.data?.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—É–ø–∞–∂–∞.');
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <Modal show={show} onHide={onClose} size="xl" backdrop="static">
            <Modal.Header closeButton>
                <Modal.Title>üß™ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –∫—É–ø–∞–∂–∏—Ä–æ–≤–∞–Ω–∏—è</Modal.Title>
            </Modal.Header>
            <Modal.Body>
                {globalError && <Alert variant="danger">{globalError}</Alert>}

                <Form id="blend-lab-form" onSubmit={handleSubmit}>
                    {/* –°–µ–∫—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ */}
                    <h5>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã</h5>
                    {components.map((c, index) => (
                        <div key={c.id} className="p-3 mb-3 border rounded">
                            <h6>{c.name}</h6>
                            <Row className="align-items-center">
                                <Col md={5}>
                                    <Form.Group>
                                        <Form.Label>–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –æ–±—ä–µ–º (–ª)</Form.Label>
                                        <Form.Control
                                            type="number"
                                            step="0.1"
                                            value={c.usedVolume}
                                            onChange={(e) => handleVolumeChange(index, e.target.value)}
                                            isInvalid={!!c.error}
                                            disabled={isLoading}
                                        />
                                        <Form.Control.Feedback type="invalid">{c.error}</Form.Control.Feedback>
                                        <Form.Text>
                                            –î–æ—Å—Ç—É–ø–Ω–æ: {c.availableVolume.toFixed(2)}–ª / –í –∫—É–ø–∞–∂–µ: {totalBlendVolume > 0 ? ((c.usedVolume / totalBlendVolume) * 100).toFixed(1) : 0}%
                                        </Form.Text>
                                    </Form.Group>
                                </Col>
                                <Col md={7}>
                                    <Form.Label>–ó–∞–±–æ—Ä –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–∞—Ä—Ç–∏–∏</Form.Label>
                                    <ProgressBar style={{height: '2rem'}}>
                                        <ProgressBar
                                            now={(c.usedVolume / c.availableVolume) * 100}
                                            label={`${c.usedVolume.toFixed(2)}–ª`}
                                            animated
                                        />
                                    </ProgressBar>
                                </Col>
                            </Row>
                        </div>
                    ))}

                    <hr />

                    {/* –°–µ–∫—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫—É–ø–∞–∂–∞ */}
                    <Row>
                        <Col md={7}>
                            <h5>–ù–æ–≤—ã–π –∫—É–ø–∞–∂</h5>
                            <Form.Group className="mb-3">
                                <Form.Label>–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫—É–ø–∞–∂–∞</Form.Label>
                                <Form.Control
                                    type="text"
                                    value={blendName}
                                    onChange={(e) => setBlendName(e.target.value)}
                                    required
                                    disabled={isLoading}
                                />
                            </Form.Group>
                            <Form.Group>
                                <Form.Label>–ü—Ä–∏–º–µ—á–∞–Ω–∏—è</Form.Label>
                                <Form.Control
                                    as="textarea"
                                    rows={3}
                                    value={blendNotes}
                                    onChange={(e) => setBlendNotes(e.target.value)}
                                    disabled={isLoading}
                                />
                            </Form.Group>
                        </Col>
                        <Col md={5} className="bg-light p-3 rounded">
                            <h5>–ò—Ç–æ–≥</h5>
                            <h3>{totalBlendVolume.toFixed(2)} –ª</h3>
                            <hr/>
                            <Form.Check
                                type="switch"
                                id="save-recipe-switch"
                                label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —Ä–µ—Ü–µ–ø—Ç"
                                checked={saveAsRecipe}
                                onChange={(e) => setSaveAsRecipe(e.target.checked)}
                                disabled={isLoading}
                            />
                            {saveAsRecipe && (
                                <Form.Group className="mt-2">
                                    <Form.Label>–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞</Form.Label>
                                    <Form.Control
                                        type="text"
                                        value={recipeName}
                                        onChange={(e) => setRecipeName(e.target.value)}
                                        required
                                        disabled={isLoading}
                                    />
                                </Form.Group>
                            )}
                        </Col>
                    </Row>
                </Form>
            </Modal.Body>
            <Modal.Footer>
                <Button variant="secondary" onClick={onClose} disabled={isLoading}>
                    –û—Ç–º–µ–Ω–∞
                </Button>
                <Button variant="success" type="submit" form="blend-lab-form" disabled={!isFormValid}>
                    {isLoading ? <Spinner as="span" animation="border" size="sm" /> : '–°–æ–∑–¥–∞—Ç—å –∫—É–ø–∞–∂'}
                </Button>
            </Modal.Footer>
        </Modal>
    );
}

export default BlendLabModal;